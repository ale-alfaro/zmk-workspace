#!/bin/bash


set -eou pipefail
proj_root="${DYI_KEYBOARD_FW_ROOT:?DYI_KEYBOARD_FW_ROOT is not set}"
proj_dir=$(realpath --relative-base="$proj_root" "$PWD" | cut -d/ -f1)
if [[ "$proj_dir" != "zmk" && "$proj_dir" != "zmk-zephyr-v4.1" ]]; then
    echo "$proj_dir is not a valid zmk project"
    echo "This script must be run from the zmk directory"
    exit 1
fi
app_dir="$DYI_KEYBOARD_FW_ROOT/$proj_dir/app"

zmk_config_dir="${ZMK_CONFIG_PATH:?ZMK_CONFIG_PATH is not set}/config"
zmk_playground_module_path="${ZMK_PLAYGROUND_MODULE_PATH:?ZMK_PLAYGROUND_MODULE_PATH is not set}"
cd $app_dir
echo "Building corne right"
west build -d build_corne/right -b rpi_pico -p -- -DZMK_CONFIG=$zmk_config_dir -DSHIELD=corne_rpico_right -DZMK_EXTRA_MODULES=$ZMK_PLAYGROUND_MODULE_PATH

echo "Building corne left"
west build -d build_corne/left -b rpi_pico -p -- -DZMK_CONFIG=$zmk_config_dir -DSHIELD=corne_rpico_left -DZMK_EXTRA_MODULES=$ZMK_PLAYGROUND_MODULE_PATH

BUILD_DIR="$app_dir/build_corne"
echo "Copying hex and elf files to build_corne"
fd "zmk.elf|zmk.hex" $BUILD_DIR/right -x cp {} "$BUILD_DIR/right_{/}"
fd "zmk.elf|zmk.hex" $BUILD_DIR/left -x cp {} "$BUILD_DIR/left_{/}"
echo "Done"
################### BUILDING WITH ZMK STUDIO ###################
proj_root="${DYI_KEYBOARD_FW_ROOT:?DYI_KEYBOARD_FW_ROOT is not set}"
proj_dir=$(realpath --relative-base="$proj_root" "$PWD" | cut -d/ -f1)
if [[ "$proj_dir" != "zmk" && "$proj_dir" != "zmk-zephyr-v4.1" ]]; then
    echo "$proj_dir is not a valid zmk project"
    echo "This script must be run from the zmk directory"
    exit 1
fi
app_dir="$DYI_KEYBOARD_FW_ROOT/$proj_dir/app"

build_dir="build_corne_studio"

zmk_config_dir="${ZMK_CONFIG_PATH:?ZMK_CONFIG_PATH is not set}/config"
zmk_playground_module_path="${ZMK_PLAYGROUND_MODULE_PATH:?ZMK_PLAYGROUND_MODULE_PATH is not set}"
cd $app_dir
# echo "Building corne right with zmk studio"
# west build -d build_corne_studio/right -b rpi_pico -p -S studio-rpc-usb-uart -- -DSHIELD=corne_rpico_right -DZMK_EXTRA_MODULES=$ZMK_PLAYGROUND_MODULE_PATH -DCONFIG_ZMK_STUDIO=1

echo "Building corne right with zmk studio (minus the rpc)"
west build -d $build_dir/right -b rpi_pico -p -- -DSHIELD=corne_rpico_right -DZMK_EXTRA_MODULES=$ZMK_PLAYGROUND_MODULE_PATH -DZMK_STUDIO=1

echo "Building corne left with zmk studio"
west build -d $build_dir/left -b rpi_pico -p -S studio-rpc-usb-uart -- -DSHIELD=corne_rpico_left -DZMK_EXTRA_MODULES=$ZMK_PLAYGROUND_MODULE_PATH -DZMK_STUDIO=1

BUILD_DIR_PATH="$app_dir/$build_dir"
echo "Copying hex and elf files to build_corne"
fd "zmk.elf|zmk.hex" $BUILD_DIR_PATH/right -x cp {} "$BUILD_DIR_PATH/right_{/}"
fd "zmk.elf|zmk.hex" $BUILD_DIR_PATH/left -x cp {} "$BUILD_DIR_PATH/left_{/}"
echo "Done"
############# FLASHING #############
set -eou pipefail

BUILD_DIR="build_corne"
while [ ! $# -eq 0 ]
do
	case "$1" in
		--help | -h)
			# helpmenu
            echo "Not implemented"
			exit
			;;
		--studio | -s)
            echo "Flashing with zmk studio"
            BUILD_DIR="build_corne_studio"
			;;
	esac
	shift
done


# usage()
# {
# cat << EOF
# usage: $0 PARAM [-o|--option OPTION] [-f|--force] [-h|--help]
#
# This script does foo.
#
# OPTIONS:
#    PARAM        The param
#    -s|--studio  Build with zmk studio
#    -h|--help    Show this message
#    -f|--force   Enable --force
# EOF
# }
#
# # PARAM=$1; shift
# FORCE=''
#
# while [ ! $# -eq 0 ]; do
#     case "$1" in
#         -s | --studio)
#             if [ "$1" ]; then
#                 ZMK_STUDIO_BUILD='--studio'
#                 shift
#             else
#                 echo '--option requires a value'
#                 exit 1
#             fi
#             ;;
#         -f | --force)
#             FORCE='--force'
#             ;;
#         -h | --help)
#             usage
#             exit
#             ;;
#         *)
#             usage
#             exit
#             ;;
#     esac
#     shift
# done

proj_root="${DYI_KEYBOARD_FW_ROOT:?DYI_KEYBOARD_FW_ROOT is not set}"
proj_dir=$(realpath --relative-base="$proj_root" "$PWD" | cut -d/ -f1)
if [[ "$proj_dir" != "zmk" && "$proj_dir" != "zmk-zephyr-v4.1" ]]; then
    echo "$proj_dir is not a valid zmk project"
    echo "This script must be run from the zmk directory"
    exit 1
fi
app_dir="$DYI_KEYBOARD_FW_ROOT/$proj_dir/app"

zmk_config_dir="${ZMK_CONFIG_PATH:?ZMK_CONFIG_PATH is not set}/config"
zmk_playground_module_path="${ZMK_PLAYGROUND_MODULE_PATH:?ZMK_PLAYGROUND_MODULE_PATH is not set}"
cd $app_dir
echo "Flashing corne right with openocd"
west flash -d $BUILD_DIR/right --runner openocd
# echo "Flashing corne right at serial port /dev/ttyACM0"
# west flash -d $BUILD_DIR/right --serial /dev/ttyACM0

echo "Flashing corne left with jlink"
west flash -d $BUILD_DIR/left --runner jlink
# echo "Flashing corne left at serial port /dev/ttyACM1"
# west flash -d $BUILD_DIR/left --serial /dev/ttyACM1
############# RESETTING #############
proj_root="${DYI_KEYBOARD_FW_ROOT:?DYI_KEYBOARD_FW_ROOT is not set}"
proj_dir=$(realpath --relative-base="$proj_root" "$PWD" | cut -d/ -f1)
if [[ "$proj_dir" != "zmk" && "$proj_dir" != "zmk-zephyr-v4.1" ]]; then
    echo "$proj_dir is not a valid zmk project"
    echo "This script must be run from the zmk directory"
    exit 1
fi
app_dir="$DYI_KEYBOARD_FW_ROOT/$proj_dir/app"

zmk_config_dir="${ZMK_CONFIG_PATH:?ZMK_CONFIG_PATH is not set}/config"
zmk_playground_module_path="${ZMK_PLAYGROUND_MODULE_PATH:?ZMK_PLAYGROUND_MODULE_PATH is not set}"
cd $app_dir
debug_target="rp2040"

echo "Resetting corne left with jlink"
openocd -s /home/alealfaro/.pico-sdk/openocd/0.12.0+dev/scripts -f interface/jlink.cfg -f target/$debug_target.cfg -c "init; reset; exit"

echo "Resetting corne right with openocd"
openocd -s /home/alealfaro/.pico-sdk/openocd/0.12.0+dev/scripts -f interface/cmsis-dap.cfg -f target/$debug_target.cfg -c "init; reset; exit"
#
