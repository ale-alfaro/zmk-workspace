#!/bin/bash

set -eou pipefail

# Default configuration, can be overridden by creating a 'config.sh' in the same directory
# or by setting environment variables.
SCRIPTS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
if [ -f "$SCRIPTS_DIR/default_config.sh" ]; then
    source "$SCRIPTS_DIR/default_config.sh"
fi

# --- Configuration with defaults ---
TARGET_MCU="${TARGET_MCU:-rp2040}"
ZMK_STUDIO="${ZMK_STUDIO:-0}"
CLEAN_BUILD="${CLEAN_BUILD:-0}"
BUILD_LEFT="${BUILD_LEFT:-1}"
BUILD_RIGHT="${BUILD_RIGHT:-1}"
FLASH_LEFT="${FLASH_LEFT:-1}"
FLASH_RIGHT="${FLASH_RIGHT:-1}"
RESET_LEFT="${RESET_LEFT:-1}"
RESET_RIGHT="${RESET_RIGHT:-1}"
LEFT_RUNNER="${LEFT_RUNNER:-jlink}"
RIGHT_RUNNER="${RIGHT_RUNNER:-openocd}"
LEFT_INTERFACE="${LEFT_INTERFACE:-jlink}"
RIGHT_INTERFACE="${RIGHT_INTERFACE:-cmsis-dap}"
LEFT_PORT="${LEFT_PORT:-}"
RIGHT_PORT="${RIGHT_PORT:-}"
PICO_SDK_OPENOCD_PATH="${PICO_SDK_OPENOCD_PATH:-}"

usage() {
    echo "Usage: $0 <command> [options]"
    echo "Commands:"
    echo "  build                   Build the firmware."
    echo "  flash                   Flash the firmware."
    echo "  reset                   Reset the boards."
    echo "  tty                     Connect to serial ports."
    echo ""
    echo "Options for build:"
    echo "  --target <mcu>          Target MCU (rp2040 or rp2350). Default: $TARGET_MCU"
    echo "  --studio                Build with ZMK Studio support."
    echo "  --clean                 Perform a clean build."
    echo "  --left-only             Build only the left side."
    echo "  --right-only            Build only the right side."
    echo ""
    echo "Options for flash:"
    echo "  --studio                Flash a ZMK Studio build."
    echo "  --left-only             Flash only the left side."
    echo "  --right-only            Flash only the right side."
    echo "  --left-runner <r>       Runner for the left side (jlink or openocd). Default: $LEFT_RUNNER"
    echo "  --right-runner <r>      Runner for the right side (jlink or openocd). Default: $RIGHT_RUNNER"
    echo "  --left-port <p>         Serial port for the left side. Default: $LEFT_PORT"
    echo "  --right-port <p>        Serial port for the right side. Default: $RIGHT_PORT"
    echo ""
    echo "Options for reset:"
    echo "  --target <mcu>          Target MCU (rp2040 or rp2350). Default: $TARGET_MCU"
    echo "  --left-only             Reset only the left side."
    echo "  --right-only            Reset only the right side."
    echo "  --left-interface <i>    Debug interface for the left side (e.g., jlink, cmsis-dap). Default: $LEFT_INTERFACE"
    echo "  --right-interface <i>   Debug interface for the right side (e.g., jlink, cmsis-dap). Default: $RIGHT_INTERFACE"
    echo ""
    echo "Options for tty:"
    echo "  --left-port <p>         Serial port for the left side. Default: $LEFT_PORT"
    echo "  --right-port <p>        Serial port for the right side. Default: $RIGHT_PORT"
    echo ""
    echo "  -h, --help              Show this help message."
}

COMMAND=$1; shift || { usage; exit 1; }

# --- Argument Parsing ---
while [[ $# -gt 0 ]]; do
    case "$1" in
        --target) TARGET_MCU="$2"; shift 2 ;;
        --studio) ZMK_STUDIO=1; shift ;;
        --clean) CLEAN_BUILD=1; shift ;;
        --left-only) BUILD_RIGHT=0; FLASH_RIGHT=0; RESET_RIGHT=0; shift ;;
        --right-only) BUILD_LEFT=0; FLASH_LEFT=0; RESET_LEFT=0; shift ;;
        --left-runner) LEFT_RUNNER="$2"; shift 2 ;;
        --right-runner) RIGHT_RUNNER="$2"; shift 2 ;;
        --left-interface) LEFT_INTERFACE="$2"; shift 2 ;;
        --right-interface) RIGHT_INTERFACE="$2"; shift 2 ;;
        --left-port) LEFT_PORT="$2"; shift 2 ;;
        --right-port) RIGHT_PORT="$2"; shift 2 ;;
        -h|--help) usage; exit 0 ;;
        *) echo "Unknown option: $1"; usage; exit 1 ;;
    esac
done

# --- Environment Setup ---
proj_root="${DYI_KEYBOARD_FW_ROOT:?DYI_KEYBOARD_FW_ROOT is not set}"
proj_dir=$(realpath --relative-base="$proj_root" "$PWD" | cut -d/ -f1)
if [[ "$proj_dir" != "zmk" && "$proj_dir" != "zmk-zephyr-v4.1" ]]; then
    echo "$proj_dir is not a valid zmk project"
    echo "This script must be run from the zmk directory"
    exit 1
fi
app_dir="$proj_root/$proj_dir/app"

zmk_config_dir="${ZMK_CONFIG_PATH:?ZMK_CONFIG_PATH is not set}/config"
zmk_playground_module_path="${ZMK_PLAYGROUND_MODULE_PATH:?ZMK_PLAYGROUND_MODULE_PATH is not set}"

# --- Board and Build Directory ---
case "$TARGET_MCU" in
    rp2040) BOARD="rpi_pico" ;;
    rp2350) BOARD="rpi_pico_w"; echo "Warning: Using board '$BOARD' for target rp2350. Please verify." ;;
    *) echo "Unsupported target: $TARGET_MCU"; exit 1 ;;
esac

BUILD_DIR_BASE="build_corne"
if [[ "$ZMK_STUDIO" -eq 1 ]]; then
    BUILD_DIR_BASE="build_corne_studio"
fi

# --- Functions ---
build_side() {
    local side=$1
    local build_dir="$BUILD_DIR_BASE/$side"
    local shield="corne_rpico_${side}"

    echo "Building corne $side for $TARGET_MCU"
    cd "$app_dir"

    if [[ "$CLEAN_BUILD" -eq 1 && -d "$build_dir" ]]; then
        echo "Cleaning build directory: $build_dir"
        rm -rf "$build_dir"
    fi

    local west_args=("-d" "$build_dir" "-b" "$BOARD" "-p" "--" "-DSHIELD=$shield" "-DZMK_EXTRA_MODULES=$zmk_playground_module_path")

    if [[ "$ZMK_STUDIO" -eq 1 ]]; then
        west_args+=("-DZMK_STUDIO=1")
        if [[ "$side" == "left" ]]; then
             west_args=("-d" "$build_dir" "-b" "$BOARD" "-p" "-S" "studio-rpc-usb-uart" "--" "-DSHIELD=$shield" "-DZMK_EXTRA_MODULES=$zmk_playground_module_path" "-DZMK_STUDIO=1")
        fi
    else
        west_args+=("-DZMK_CONFIG=$zmk_config_dir")
    fi

    west build "${west_args[@]}"

    echo "Copying hex and uf2 files to build directory"
    local output_dir="$app_dir/$build_dir"
    fd "zmk.uf2|zmk.hex" "$output_dir/zephyr" -x cp {} "$app_dir/${build_dir}_${side}_{/}"
}

flash_side() {
    local side=$1
    local runner=$2
    local port=$3
    local build_dir="$BUILD_DIR_BASE/$side"

    echo "Flashing corne $side with $runner"
    cd "$app_dir"

    local west_args=("-d" "$build_dir" "--runner" "$runner")

    if [[ -n "$port" ]]; then
        west_args+=("--serial" "$port")
        echo " at serial port $port"
    fi

    west flash "${west_args[@]}"
}

reset_side() {
    local side=$1
    local interface=$2

    if [ -z "$PICO_SDK_OPENOCD_PATH" ]; then
        if [ -d "$HOME/.pico-sdk/openocd" ]; then
            PICO_SDK_OPENOCD_PATH=$(find "$HOME/.pico-sdk/openocd" -type d -name "scripts" | head -n 1)
        else
            echo "PICO_SDK_OPENOCD_PATH is not set. Please set it to the path of your openocd scripts."
            exit 1
        fi
    fi

    echo "Resetting corne $side with $interface"

    openocd -s "$PICO_SDK_OPENOCD_PATH" -f "interface/$interface.cfg" -f "target/$TARGET_MCU.cfg" -c "init; reset; exit"
}

start_tty() {
    local port=$1
    local side=$2
    if [[ -n "$port" ]]; then
        echo "Starting picocom for $side side on $port"
        picocom -b 115200 "$port" &
    fi
}

# --- Command Dispatch ---
case "$COMMAND" in
    build)
        if [[ "$BUILD_LEFT" -eq 1 ]]; then build_side "left"; fi
        if [[ "$BUILD_RIGHT" -eq 1 ]]; then build_side "right"; fi
        ;;
    flash)
        if [[ "$FLASH_LEFT" -eq 1 ]]; then flash_side "left" "$LEFT_RUNNER" "$LEFT_PORT"; fi
        if [[ "$FLASH_RIGHT" -eq 1 ]]; then flash_side "right" "$RIGHT_RUNNER" "$RIGHT_PORT"; fi
        ;;
    reset)
        if [[ "$RESET_LEFT" -eq 1 ]]; then reset_side "left" "$LEFT_INTERFACE"; fi
        if [[ "$RESET_RIGHT" -eq 1 ]]; then reset_side "right" "$RIGHT_INTERFACE"; fi
        ;;
    tty)
        if ! command -v picocom &> /dev/null; then
            echo "picocom could not be found. Please install it to use the tty command."
            exit 1
        fi
        start_tty "$LEFT_PORT" "left"
        start_tty "$RIGHT_PORT" "right"
        if [[ -n "$LEFT_PORT" || -n "$RIGHT_PORT" ]]; then
            echo "Waiting for tty sessions to end..."
            wait
        else
            echo "No ports specified. Use --left-port and/or --right-port."
        fi
        ;;
    *)
        usage
        exit 1
        ;;
esac

echo "Done"
