#!/usr/bin/env just --justfile

set dotenv-load := true
set dotenv-filename := "justfile.env"

set unstable := true
set shell := ["bash", "-c"]

# Default command to run when no command is specified

# --- Variables ---
# Target MCU, can be 'rpico' or 'rpico2'. Overridden by TARGET_MCU env var.
LEFT_TARGET_MCU := env('LEFT_TARGET_MCU', 'rpi_rpico')
RIGHT_TARGET_MCU := env('TARGET_MCU', LEFT_TARGET_MCU)
left_board := if LEFT_TARGET_MCU == "rpi_pico2" { "rpi_pico2/rp2350a/m33" } else { LEFT_TARGET_MCU }
right_board := if RIGHT_TARGET_MCU == "rpi_pico2" { "rpi_pico2/rp2350a/m33" } else { RIGHT_TARGET_MCU }
left_openocd_target := if LEFT_TARGET_MCU == "rpi_pico" { "rp2040" } else { "rp2350a" }
right_openocd_target := if RIGHT_TARGET_MCU == "rpi_pico" { "rp2040" } else { "rp2350a" }

# Runner for the left side, 'jlink' or 'openocd'. Overridden by LEFT_RUNNER env var.
left_runner:= env('LEFT_RUNNER', 'openocd')

# Runner for the right side, 'jlink' or 'openocd'. Overridden by RIGHT_RUNNER env var.
right_runner := env('RIGHT_RUNNER', 'openocd')
LEFT_INTERFACE :=  if left_runner == 'openocd' { 'cmsis-dap' } else { 'jlink' }
RIGHT_INTERFACE :=  if right_runner == 'openocd' { 'cmsis-dap' } else { 'jlink' }

# Debug interface for the left side. Overridden by LEFT_INTERFACE env var.

openocd_opts_left := "-f interface/" + LEFT_INTERFACE + ".cfg" + ' -f target/' + LEFT_TARGET_MCU + '.cfg' + ' -c "init; reset; exit"'
openocd_opts_right := "-f interface/" + RIGHT_INTERFACE + ".cfg" + ' -f target/' + LEFT_TARGET_MCU + '.cfg' + ' -c "init; reset; exit"'


# Debug interface for the right side. Overridden by RIGHT_INTERFACE env var.

# Serial port for the left side. Overridden by LEFT_PORT env var.
LEFT_PORT := env('LEFT_PORT', '/dev/ttyACM0')

# Serial port for the right side. Overridden by RIGHT_PORT env var.
RIGHT_PORT := env('RIGHT_PORT', '/dev/ttyACM1')

# Path to Pico SDK OpenOCD scripts. Overridden by PICO_SDK_OPENOCD_PATH env var.
openocd_path := env('PICO_OPENOCD_PATH', `sh -c 'path="$HOME/.pico-sdk/openocd"; if [ -d "$path" ]; then find "$path" -type d -name "scripts" | head -n 1; fi'`)

# --- Environment Setup ---
proj_root := justfile_directory()
app_dir := proj_root + "/app"
workspace_dir := parent_directory(proj_root)
zmk_config_dir := join(workspace_dir, 'zmk-config', 'config')
zmk_playground_module_path := join(workspace_dir, 'zmk_playground_module')

# --- Board and Build Directory ---
build_dir := "build_corne"
# --- Helper for OpenOCD path ---
# pico_sdk_openocd_path := if openocd_path != '' { openocd_path } else { ` }
zmk_studio_cmake_args := if env('ZMK_STUDIO', '')  == "1" { "-DZMK_STUDIO=1" } else { "" }
snippet := zmk_studio_cmake_args && "studio-rpc-usb-uart "
base_west_args := snippet + app_dir + " -p"
cmake_args := " -DZMK_EXTRA_MODULES=" + zmk_playground_module_path + zmk_studio_cmake_args
# cmake_args := if ZMK_STUDIO == "1" {"-DZMK_STUDIO=1" } else { "-DZMK_CONFIG=" + zmk_config_dir }
# --- Recipes ---

default:
    just --list
    just print-env
    just print-paths

print-env:
    @echo "Printing left side environment variables"
    @echo "LEFT_TARGET_MCU={{LEFT_TARGET_MCU}}"
    @echo "LEFT_INTERFACE={{LEFT_INTERFACE}}"
    @echo "LEFT_PORT={{LEFT_PORT}}"

    @echo "RIGHT_TARGET_MCU={{RIGHT_TARGET_MCU}}"
    @echo "RIGHT_INTERFACE={{RIGHT_INTERFACE}}"
    @echo "RIGHT_PORT={{RIGHT_PORT}}"

    @echo "Printing other environment variables"
    @echo "PICO_SDK_OPENOCD_PATH={{openocd_path}}"

print-paths:
    @echo "app_dir={{app_dir}}"
    @echo "workspace_dir={{workspace_dir}}"
    @echo "zmk_config_dir={{zmk_config_dir}}"
    @echo "zmk_playground_module_path={{zmk_playground_module_path}}"

clean-all:
    rm -rf {{build_dir}}

# Build left side only
build side *WEST_ARGS:
    @echo "Building corne left for {{LEFT_TARGET_MCU}}"
    # --- Execute the command ---
    west build -d {{build_dir}}/{{side}} -b {{if side == "left" { left_board } else { right_board } }} {{base_west_args}} {{WEST_ARGS}} -- {{cmake_args}} -DSHIELD=corne_rpico_{{side}}
    @echo "Copying hex and uf2 files to build directory"
    @fd "zmk.uf2|zmk.hex" "{{build_dir}}/{{side}}/zephyr" -x cp {} "{{build_dir}}_{{side}}_{/}"


# build-all: (build "left") (build "right")
build-all:
    just build "left"
    just build "right"


flash side: (build side)
    @echo "Flashing corne {{side}}"
    west flash -d "{{build_dir}}/{{side}}" --runner '{{if side == "left" { left_runner } else { right_runner } }}'

flash-rpi-pico2:
    @echo "Flashing corne left for rpi_pico2"
    openocd -s /home/alealfaro/.pico-sdk/openocd/0.12.0+dev/scripts -f interface/jlink.cfg -f target/rp2350.cfg -c "adapter speed 5000" -c "program build_corne/right/zephyr/zmk.hex verify reset exit"

# # Flash firmware to both sides
# flash-all:
#     @just flash "left"
#     @just flash "right"
#
# # Flash left side only
#
# # Reset a specific side ('left' or 'right')
# reset side:
#     @echo "Resetting corne {{side}}"
#     openocd -s {{openocd_path}} {{if side == "left" { openocd_opts_left } else { openocd_opts_right } }}
#
#
# # Reset both sides
# reset-all: reset-left reset-right
#
# # Reset left side only
# reset-left:
#     just reset "left"
#
# # Reset right side only
# reset-right:
#     just reset "right"
#
# Connect to TTY for a specific side ('left' or 'right')
# tty side:
#     port := if side == 'left' { LEFT_PORT } else { RIGHT_PORT }
#     @if ! command -v picocom > /dev/null { echo "picocom could not be found. Please install it."; exit 1; }
#     @if port != '' { \
#         echo "Starting picocom for {{side}} side on {{port}}"; \
#         picocom -b 115200 "{{port}}"; \
#     } else { \
#         echo "No port specified for {{side}} side."; \
#     }
#
# # Connect to TTY for the left side
# tty-left:
#     just tty "left"
#
# # Connect to TTY for the right side
# tty-right:
#     just tty "right"
#
# # Connect to TTY for both sides in parallel
# tty-all:
#     @if ! command -v picocom > /dev/null { echo "picocom could not be found. Please install it."; exit 1; }
#     @if LEFT_PORT != '' { echo "Starting picocom for left side on {{LEFT_PORT}}"; picocom -b 115200 "{{LEFT_PORT}}" & }
#     @if RIGHT_PORT != '' { echo "Starting picocom for right side on {{RIGHT_PORT}}"; picocom -b 115200 "{{RIGHT_PORT}}" & }
#     @if LEFT_PORT != '' || RIGHT_PORT != '' { echo "Waiting for tty sessions to end... (Press Ctrl+C to stop)"; wait; } else { echo "No ports specified."; }
#
# # Watch for changes and rebuild
# watch:
#     echo "Watching for changes in {{zmk_config_dir}} and {{app_dir}}/dts"
#     bacon "just build-all" --watch "{{zmk_config_dir}}" --watch "{{app_dir}}/dts"
#
# # Clean build directories
# clean:
#     build_dir_left := "{{app_dir}}/{{build_dir}}/left"
#     build_dir_right := "{{app_dir}}/{{build_dir}}/right"
#     echo "Cleaning build directories"
#     @if path_exists(build_dir_left) { rm -rf "{{build_dir_left}}" }
#     @if path_exists(build_dir_right) { rm -rf "{{build_dir_right}}" }
#
# # Open development environment with Zellij
# dev:
#     zellij --layout dev.kdl
#
# # Default alias
# all: build-all

